e <- y - beta0 - beta1*x
sigma <- sqrt(sum(e^2) / (n-2))
ssx<- sum((x - mean(x))^2)
seBeta0 <- (1 / n + mean(x)^2 / ssx) ^.5 * sigma
seBeta1 <- sigma / sqrt(ssx)
tBeta0 <- beta / seBeta0; tBeta1 <- beta1 / seBeta1
pBeta0 <- 2* pt(abs(tBeta0), df = n-2, lower.tail = F)
pBeta1 <- 2* pt(abs(tBeta1), df = n-2, lower.tail = F)
coefTable <- rbind(c(beta0, seBeta0, tBeta0, pBeta0), c(beta1, seBeta1, tBeta1, pBeta1))
colnames(coefTable) <- c("Estimate", "Std. Error", "t value", "P(>|t|)")
rownames(coefTable) <- c("(Intercept)", "x")
tBeta0 <- beta0 / seBeta0; tBeta1 <- beta1 / seBeta1
pBeta0 <- 2* pt(abs(tBeta0), df = n-2, lower.tail = F)
pBeta1 <- 2* pt(abs(tBeta1), df = n-2, lower.tail = F)
coefTable <- rbind(c(beta0, seBeta0, tBeta0, pBeta0), c(beta1, seBeta1, tBeta1, pBeta1))
colnames(coefTable) <- c("Estimate", "Std. Error", "t value", "P(>|t|)")
rownames(coefTable) <- c("(Intercept)", "x")
pBeta1
plot(coefTable)
coefTable
summary(fit)$coefficients
resid(fit)
sd(resid(fit))
sd(e)
data(mtcars)
x <- mtcars$weight
y <- mtcars$mpg
fitmtcars <- lm(y ~ x)
summary(fitmtcars)$coefficients
set(mtcars)
head(mtcars)
x <- mtcars$wt
y <- mtcars$mpg
fitmtcars <- lm(y ~ x)
summary(fitmtcars)$coefficients
x <- mtcars$mpg
y <- mtcars$wt
fitmtcars <- lm(y ~ x)
summary(fitmtcars)$coefficients
x <- mtcars$wt
y <- mtcars$mpg
fitmtcars <- lm(y ~ x)
summary(fitmtcars)$coefficients
1.293959e-10 * mean(x)
mean(x)
newdata = data.frame (wt = mean(x))
predict (fitmtcars, newdata,interval="confidence")
car.lm <- lm (mtcars$mpg ~  mtcars$wt)
avgweight = mean (mtcars$wt)
newdata = data.frame (wt = avgweight)
predict (car.lm, newdata,interval="predict")
car.lm <- lm (mtcars$mpg ~  mtcars$wt)
avgweight = mean (mtcars$wt)
newdata = data.frame (wt = avgweight)
predict (car.lm, newdata,interval="predict")
car.lm <- lm (mtcars$mpg ~  mtcars$wt)
avgweight = mean (mtcars$wt)
newdata = data.frame (wt = avgweight)
predict (car.lm, newdata,interval="confidence")
?mtcars
help(mtcars)
x
data(mtcars)
x <- mtcars$wt
y <- mtcars$mpg
fitmtcars <- lm(y ~ x)
summary(fitmtcars)$coefficients
newdata = data.frame (wt = mean(x))
predict (fitmtcars, newdata,interval=("confidence")
)
xVals <- seq(min(x), max(x), by = .01)
newdata = data.frame (wt = xvals)
predict (fitmtcars, newdata,interval="confidence")
xVals <- seq(min(x), max(x), by = .01)
newdata = data.frame (wt = xVals)
predict (fitmtcars, newdata,interval="confidence")
xVals <- seq(min(x), max(x), by = .01)
newdata = data.frame (x = xVals)
predict (fitmtcars, newdata,interval="confidence")
newdata = data.frame (x = mean(x))
predict (fitmtcars, newdata,interval="confidence")
xvals <- (mean(x)+3000)/length(x)
newdata = data.frame (x = xvals)
predict (fitmtcars, newdata,interval="confidence")
xvals
xvals <- (mean(x)+3)/length(x)
newdata = data.frame (x = xvals)
predict (fitmtcars, newdata,interval="confidence")
xvals <- (mean(x)+(3/length(x))
xvals <- mean(x)+(3/length(x))
newdata = data.frame (x = xvals)
predict (fitmtcars, newdata,interval="confidence")
xvals <- (mean(x)*length(x)+3)/(length(x)+1)
newdata = data.frame (x = xvals)
predict (fitmtcars, newdata,interval="confidence")
predict (fitmtcars, newdata,interval="prediction")
xVals <- seq(min(x), max(x), by = .01)
newdata = data.frame (x = xVals)
predict (fitmtcars, newdata,interval="prediction")
newdata = data.frame (x = mean(x))
predict (fitmtcars, newdata,interval="prediction")
head(mtcars)
mtcars$wt
mean(x)
newdata = data.frame (x = mean(x))
predict (fitmtcars, newdata,interval="confidence")
newdata = data.frame (x = 3000)
predict (fitmtcars, newdata,interval="confidence")
newdata = data.frame (x = 3)
predict (fitmtcars, newdata,interval="confidence")
newdata = data.frame (x = 3)
predict (fitmtcars, newdata,interval="prediction")
newdata = data.frame (x = 2)
predict (fitmtcars, newdata,interval="prediction")
newdata = data.frame (x = 2)
predict (fitmtcars, newdata,interval="confidence")
wts <- wt*.5
wts <- mtcars$wt*.5
fitmtcars <- lm(y ~ wts)
sumCoef<-summary(fitmtcars)$coefficients
sumCoef[2,1]+c(-1,1)*qt(.975,df=fitmtcars$df)*sumCoef[2,2]
summary(fitmtcars)
fitmtcars <- lm(y ~ wts/100)
fitmtcars <- lm(y ~ (wts/100))
wts <- mtcars$wt*.5/100
summary(fitmtcars)
fitmtcars <- lm(y ~ wts)
summary(fitmtcars)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
xc <- x + 1
xc
lm( y~x)
lm(y~xc)
?slope
summary(lm~x)
summary(lm(y~x))
summary(lm(y~xc))
beta1 <- cor(y, x) * sd(y) / sd(x)
beta0 <- mean(y) - beta1 * mean(x)
beta1
beta0
beta1 <- cor(y, xc) * sd(y) / sd(xc)
beta0 <- mean(y) - beta1 * mean(xc)
beta1
beta0
0.1884572-0.7224211
x <- mtcars$wt
y <- mtcars$mpg
fitmtcars <- lm(y ~ x)
beta1 =cor(y,x)∗sd(y)/sd(x)
beta0 =mean(y)−beta1∗mean(x)
e1 = y−beta0−beta1∗x
ssq1 =sum(e2)
beta1 =cor(y,x)∗sd(y)/sd(x)
beta0 =mean(y)−beta1∗mean(x)
e1 = y−beta0−beta1∗x
ssq1 =sum(e1)
beta1 =cor(y,x)∗sd(y)/sd(x)
beta0 =mean(y)−beta1∗mean(x)
e1 = y−beta0−beta1∗x
ssq1 =sum(e^2)
e2 =y−mean(y
)
ssq2 =sum(e2^2)
ssq2/ssq1
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
glm1 = glm(chd ~ age + alcohol + obesity + tobacco + typea + ldl, family="binomial", data=trainSA)
missClass = function(values, prediction){
sum(((prediction > 0.5) * 1) != values) / length(values)
}
pred0 = predict(glm1, newdata=trainSA, type="response")
val0 = trainSA$chd
missClass(val0, pred0)
pred1 = predict(glm1, newdata=testSA, type="response")
val1 = testSA$chd
missClass(val1, pred1)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
glm1 = glm(chd ~ age + alcohol + obesity + tobacco + typea + ldl, family="binomial", data=trainSA)
missClass = function(values, prediction){
sum(((prediction > 0.5) * 1) != values) / length(values)
}
pred0 = predict(glm1, newdata=trainSA, type="response")
val0 = trainSA$chd
missClass(val0, pred0)
pred1 = predict(glm1, newdata=testSA, type="response")
val1 = testSA$chd
missClass(val1, pred1)
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages("tree")
library(tree)
tree1 = tree(Area ~ ., data=olive)
plot(tree1)
text(tree1)
newdata = as.data.frame(t(colMeans(olive)))
pred1 <- predict(tree1,newdata)
pred1
install.packages("C:/Users/Yuha/Downloads/pgmm_1.0.tar.gz", repos = NULL, type = "source")
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages("tree")
library(tree)
tree1 = tree(Area ~ ., data=olive)
plot(tree1)
text(tree1)
newdata = as.data.frame(t(colMeans(olive)))
pred1 <- predict(tree1,newdata)
pred1
install.packages("tree")
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages("tree")
library(tree)
tree1 = tree(Area ~ ., data=olive)
plot(tree1)
text(tree1)
newdata = as.data.frame(t(colMeans(olive)))
pred1 <- predict(tree1,newdata)
pred1
install.packages("C:/Users/Yuha/Downloads/pgmm_1.0.tar.gz", repos = NULL, type = "source")
install.packages("pgmm")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
set.seed(125)
data(segmentationOriginal)
inTrain <- createDataPartition(y=segmentationOriginal$Case, p=0.7, list=FALSE)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
set.seed(125)
modFit <- train(Class~., data=training, method="rpart")
library(rattle)
fancyRpartPlot(modFit$finalModel)
install.packages("rattle")
data(segmentationOriginal)
inTrain <- createDataPartition(y=segmentationOriginal$Case, p=0.7, list=FALSE)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
set.seed(125)
modFit <- train(Class~., data=training, method="rpart")
library(rattle)
fancyRpartPlot(modFit$finalModel)
data(segmentationOriginal)
inTrain <- createDataPartition(y=segmentationOriginal$Case, p=0.7, list=FALSE)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
set.seed(125)
modFit <- train(Class~., data=training, method="rpart")
library(rattle)
fancyRpartPlot(modFit$finalModel)
data(segmentationOriginal)
inTrain <- createDataPartition(y=segmentationOriginal$Case, p=0.7, list=FALSE)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
set.seed(125)
modFit <- train(Class~., data=training, method="rpart")
fancyRpartPlot(modFit$finalModel)
detach("package:rattle", unload=TRUE)
library("rattle", lib.loc="C:/Program Files/R/R-3.0.3/library")
data(segmentationOriginal)
inTrain <- createDataPartition(y=segmentationOriginal$Case, p=0.7, list=FALSE)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
set.seed(125)
modFit <- train(Class~., data=training, method="rpart")
fancyRpartPlot(modFit$finalModel)
test <- head(subset(segmentationOriginal,Case== "Test",select = -Case))
train <- head(subset(segmentationOriginal,Case== "Train",select = -Case))
set.seed(125)
modFit <- train(Class ~. , method="rpart",data=train)
test1 <- test[1,c("TotalIntenCh2","FiberWidthCh1", "PerimStatusCh1")]
test1[1,] <- c(23000,10,2)
predict(modFit,test1)
test <- head(subset(segmentationOriginal,Case== "Test",select = -Case))
train <- head(subset(segmentationOriginal,Case== "Train",select = -Case))
modFit <- train(Class ~. , method="rpart",data=train)
test1 <- test[1,c("TotalIntenCh2","FiberWidthCh1", "PerimStatusCh1")]
test1[1,] <- c(23000,10,2)
predict(modFit,test1)
set.seed(125)
modelFit <- train (outcome ~. , method = "rpart", data= "train")
test1 <- test[1,c("TotalIntenCh2","FiberWidthCh1", "PerimStatusCh1")]
test1[1,] <- c(23000,10,2)
predict(modFit,test1)
set.seed(125)
modelFit <- train (outcome ~. , method = "rpart", data= "train")
test1 <- test[1,c("TotalIntenCh2","FiberWidthCh1", "PerimStatusCh1")]
test1[1,] <- c(23000,10,2)
predict(modelFit,test1)
inTrain <- createDataPartition(y=segmentationOriginal$Case, p=0.7, list=FALSE)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
set.seed(125)
modelFit <- train (outcome ~. , method = "rpart", data= "train")
test1 <- test[1,c("TotalIntenCh2","FiberWidthCh1", "PerimStatusCh1")]
test1[1,] <- c(23000,10,2)
predict(modelFit,test1)
data(segmentationOriginal)
inTrain <- createDataPartition(y=segmentationOriginal$Case, p=0.7, list=FALSE)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
set.seed(125)
modFit <- train(Class~., data=training, method="rpart")
library(rattle)
fancyRpartPlot(modFit$finalModel)
?RpartPlot
install.packages("rpart.plot")
data(segmentationOriginal)
inTrain <- createDataPartition(y=segmentationOriginal$Case, p=0.7, list=FALSE)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
set.seed(125)
modFit <- train(Class~., data=training, method="rpart")
library(rattle)
fancyRpartPlot(modFit$finalModel)
data(segmentationOriginal)
inTrain <- createDataPartition(y=segmentationOriginal$Case, p=0.7, list=FALSE)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
set.seed(125)
modFit <- train(Class~., data=training, method="rpart")
fancyRpartPlot(modFit$finalModel)
data(segmentationOriginal)
inTrain <- createDataPartition(y=segmentationOriginal$Case, p=0.7, list=FALSE)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
set.seed(125)
library(rattle)
modFit <- train(Class~., data=training, method="rpart")
fancyRpartPlot(modFit$finalModel)
install.packages("e1071")
data(segmentationOriginal)
inTrain <- createDataPartition(y=segmentationOriginal$Case, p=0.7, list=FALSE)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
set.seed(125)
library(rattle)
modFit <- train(Class~., data=training, method="rpart")
fancyRpartPlot(modFit$finalModel)
table(segmentationOriginal$Class)
predict(modFit$finalModel)
predict(modFit, finalModel)
predict(modfit, modFit$finalModel)
predict(modFit, modFit$finalModel)
predict(modFit,test1)
data(segmentationOriginal)
inTrain <- createDataPartition(y=segmentationOriginal$Case, p=0.7, list=FALSE)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
set.seed(125)
modFit <- train(Class~., data=training, method="rpart")
library(rattle)
fancyRpartPlot(modFit$finalModel)
training <- subset(segmentationOriginal, Case == "Train")
testing <- subset(segmentationOriginal, Case == "Test")
set.seed(125)
modFit <- train(Class~., data=training, method="rpart")
library(rattle)
fancyRpartPlot(modFit$finalModel)
predict(modFit, newdata=testing)
inTrain <- createDataPartition(y=segmentationOriginal$Case, p=0.7, list=FALSE)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
set.seed(125)
training1 <- subset(segmentationOriginal, Case == "Train")
testing1 <- subset(segmentationOriginal, Case == "Test")
modFit <- train(Class~., data=training1, method="rpart")
library(rattle)
fancyRpartPlot(modFit$finalModel)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
vowel.rf  <- randomForest(y ~ ., data=vowel.train)
library(e1071)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
vowel.rf  <- randomForest(y ~ ., data=vowel.train)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
?randomForest
library(ElemStatLearn)
library(randomForest)
library(e1071)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
install.packages("randomForest")
library(ElemStatLearn)
library(randomForest)
library(e1071)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
table(vowel.train$y)
rain.rf <- randomForest(train.y ~ ., data=vowel.train)
> library(caret)
> vm <- varlmp(train.rf)
rain.rf <- randomForest(train.y ~ ., data=vowel.train)
library(caret)
vm <- varlmp(train.rf)
rain.rf <- randomForest(vowel.train$y ~ ., data=vowel.train)
library(carret)
vm <- varlmp(train.rf)
train.rf <- randomForest(vowel.train$y ~ ., data=vowel.train)
vm <- varlmp(train.rf)
train.rf <- randomForest(vowel.train$y ~ ., data=vowel.train)
vm <- varImp(train.rf)
print(vm)
data(mtcars)
y<- mtcars$mpg
x<- mtcars$wt
head(mtcars)
z<- mtcars$cyl
lm(Y ~ x*z)
lm(y ~ x*z)
lm(y ~ x*z$4)
lm(y ~ x*z==4)
lm(y ~ x*[z==4])
z==4
[[z==4]]
[[z=4]]
[z=4]
[z==4]
z4 <= [z==4]
z4 <= z==4
z4 <= z=4
lm(y ~ x + z)
lm(mpg~factor(cyl)+wt,data=mtcars)
lm(mpg~factor(cyl$4)+wt,data=mtcars)
lm(mpg~factor(cyl)4+wt,data=mtcars)
lm(mpg~factor(cyl)+wt,data=mtcars)
lm(mpg~as.factor(cyl)+wt,data=mtcars)
lm(y ~ z + x)
z
mtcars
z<- factor(mtcars$cyl)
lm(y ~ z + x)
lm(mpg~factor(cyl)+wt,data=mtcars)
lm(mpg~factor(cyl),data=mtcars)
lm(mpg~factor(cyl)+wt,data=mtcars)
fit1<- lm(mpg ~ factor(cyl) + wt, data=mtcars)
fit1<- lm(mpg ~ wt, data=mtcars)
fit2<- update(fit1, mpg ~ factor(cyl)wt, data=mtcars)
fit2<- update(fit1, mpg ~ factor(cyl) + wt, data=mtcars)
anove(fit1, fit2)
anova(fit1, fit2)
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
?wt
?mtcars
lm(mpg ~ factor(cyl)+I(wt * 0.5)  , data = mtcars)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
?beta1hat
influence(regmodel)
influence(y,x)
?influence
influence(lm(y~x))
dfbetas(lm(y~x))
lm(mpg~factor(cyl)+wt,data=mtcars)
lm(mpg~factor(cyl),data=mtcars)
lm(mpg~wt,data=mtcars)
?pairs
pairs(mtcars, panel=panel.smooth, main="MTCars Data")
install.packages("C:/Users/Yuha/Downloads/pandoc-1.12.4.2-1-windows.msi", repos = NULL)
install.packages("C:/Users/Yuha/Downloads/pandoc-1.12.4.2.zip", repos = NULL)
install.packages("C:/Users/Yuha/Downloads/pandoc-1.12.4.2.tar.gz", repos = NULL, type = "source")
library(pandoc)
library(shinyapps)
deployApp()
setwd("~/Coursera")
deployApp()
runApp()
library(shiny)
library(shinyapps)
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("~/Coursera/New folder")
runApp()
library(slidify)
author("DDP")
setwd("~/GitHub/slidify")
author("slidify")
setwd("~/GitHub")
author("slidify")
